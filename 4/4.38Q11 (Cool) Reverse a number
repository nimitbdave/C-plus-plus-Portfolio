/* 
Write and run a program that reverses the digits of a given positive integer. (See Problem
3.13.)

The trick here is to strip off the digits one at a time from the given integer and “accumulate” them in
reverse in another integer:
*/

#include <cstdlib> // defines the rand() function and RAND_MAX const
#include <ctime> // defines the time() function
//#include <time.h> // use this if <ctime> is not recognized
#include <cfloat>
#include <iomanip> // defines setw()
#include <cmath> // defines pow() and log()
#include <iostream> // defines cin and cout
using namespace std; 

int main()
{   long m,d,n = 0;
    cout << "Enter a positive integer: ";
    cin >> m;                                                       // 123456
    while (m > 0)                                                   // while 123456 > 0  
    { d = m % 10;       // d will be the right-most digit of m      // 123456 % 10 = 6, which is the last digit
        m /= 10;        // then remove that digit from m            // m = m/10 = 123456/10 = 12345, which is the rest of the number removed
        n = 10*n + d;   // and append that digit to n               // n = 10*0 + d = 0 + 6 = final digit appended to n
    }                                                               // loop keeps going until n = 654321
    cout << "The reverse is " << n << endl;                         // "The reverse is 654321"  
}

/*
OUPUT: 
Enter a positive integer: 123456
The reverse is 654321


In this run, m begins with the value 123,456. In the first iteration of the loop, d is assigned the digit 6,
m is reduced to 12,345, and n is increased to 6. On the second iteration, d is assigned the digit 5, m is
reduced to 1,234, and n is increased to 65. On the third iteration, d is assigned the digit 4, m is reduced
to 123, and n is increased to 654. This continues until, on the sixth iteration, d is assigned the digit 1,
m is reduced to 0, and n is increased to 654,321.
*/
