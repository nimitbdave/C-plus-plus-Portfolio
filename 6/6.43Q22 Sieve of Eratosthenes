/* 
Implements the Sieve of Eratosthenes to find prime numbers. Defines a boolean array named
isPrime[SIZE], sets its values isPrime[0] and isPrime[1] false (2 is the first
prime), and sets all the other elements true. Then for each i from 4 to SIZE-1, sets
isPrime[i] false if i is divisible by 2 (i.e., i%2 = 0). Then for each i from 6 to
SIZE-1, sets isPrime[i] false if i is divisible by 3. Repeats this process for each possible
divisor from 2 to SIZE/2. When finished, all the i's for which isPrime[i] is still
true are the prime numbers. They are the numbers that have fallen through the sieve.

*/

#include <cctype> // defines the functions isdigit(), islower(), etc.
#include <cstdlib> // rand(), RAND_MAX const, exit()
#include <ctime> // defines the time() function
//#include <time.h> // use this if <ctime> is not recognized
#include <cfloat>
#include <iomanip> // defines setw()
#include <cmath> // defines pow() and log(), fabs(), sqrt()
#include <iostream> // defines cin and cout
using namespace std; 

const int SIZE = 400;
void sieve(bool[],int);
void print(bool[],int);

int main()
{ // prints all the prime numbers less than SIZE:
  bool isPrime[SIZE] = {0};
  sieve(isPrime,SIZE);
  print(isPrime,SIZE);
}
void sieve(bool isPrime[],int n)
{ // sets isPrime[i] = false iff i is not prime:
  for (int i=2; i<n; i++)
    isPrime[i] = true;        // assume all i > 1 are prime
  for (int p=2; p<=n/2; p++)
    for (int m=2*p; m<n; m += p)
      isPrime[m] = false;     // no multiple of p is prime
}
void print(bool a[],i nt n)
{ // prints each i for which isPrime[i] is true:
  for (int i=1; i<n; i++)
    if (a[i]) 
      cout << setw(3) << i;
    else 
      cout << setw(3) << (i%20==0?'\n':' ');
}

/*
OUPUT: 
2 3 5 7 11 13 17 19
23 29 31 37
41 43 47 53 59
61 67 71 73 79
83 89 97
101 103 107 109 113
127 131 137 139
149 151 157
163 167 173 179
181 191 193 197 199
211
223 227 229 233 239
241 251 257
263 269 271 277
281 283 293
307 311 313 317
331 337
347 349 353 359
367 373 379
383 389 397
*/
