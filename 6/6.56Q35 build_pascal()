/* 
function that creates Pascalâ€™s Triangle in the square matrix that is passed to
it. For example, if the two-dimensional array a and the integer 4 were passed to the function,
then it would load the following into a:

1 0 0 0 0
1 1 0 0 0
1 2 1 0 0
1 3 3 1 0
1 4 6 4 1

*/

#include <cctype> // defines the functions isdigit(), islower(), etc.
#include <cstdlib> // rand(), RAND_MAX const, exit()
#include <ctime> // defines the time() function
//#include <time.h> // use this if <ctime> is not recognized
#include <cfloat>
#include <iomanip> // defines setw()
#include <cmath> // defines pow() and log(), fabs(), sqrt()
#include <iostream> // defines cin and cout
using namespace std; 

int main()
{ // 
    
}
void build_pascal(int p[][SIZE], int n)
{ assert(n > 0 && n < SIZE);
  for (int i=0; i<SIZE; i++)
    for (int j=0; j<SIZE; j++)
      if (i>n || j>i) 
        p[i][j] = 0;
      else if (j==0 || j==i) 
        p[i][j] = 1;
      else 
        p[i][j] = p[i-1][j-1] + p[i-1][j];
}

/*
OUPUT: 
1 0 0 0 0
1 1 0 0 0
1 2 1 0 0
1 3 3 1 0
1 4 6 4 1
*/
